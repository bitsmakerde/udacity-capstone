service:
  name: serverless-parcplaces-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation

package:
  individually: true

custom:
  serverless-offline:
    port: 3003

  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true

  documentation:
    api:
      info:
        version: v1.0.0
        title: Udagram CAR API
        description: Serverless application for images sharing
    models:
      - name: CarRequest
        contentType: application/json
        schema: ${file(models/create-car-request.json)}
      - name: CarUpdateRequest
        contentType: application/json
        schema: ${file(models/update-car-request.json)}

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-central-1'}
  rolePermissionsBoundary: arn:aws:iam::177230877307:policy/acs/acs-boundary-policy

  tracing:
    lambda: true
    apiGateway: true

  environment:
    CAR_TABLE: Cars-${self:provider.stage}
    CAR_USER_ID: CarUserId
    CARS_S3_BUCKET: sercerless-udagram-cars-datacamp267-abc-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetCars:
    handler: src/lambda/http/getCars.handler
    events:
      - http:
          method: get
          path: cars
          cors: true
          authorizer:
            name: Auth
            localAuthorizer:
              name: "mylocalAuthProxyFn"
              type: "request"
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CAR_TABLE}/index/${self:provider.environment.CAR_USER_ID}

  CreateCar:
    handler: src/lambda/http/createCar.handler
    events:
      - http:
          method: post
          path: cars
          cors: true
          authorizer:
            name: Auth
            localAuthorizer:
              name: "mylocalAuthProxyFn"
              type: "request"
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new car
            description: Create a new car
            requestModels:
              "application/json": CarRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CAR_TABLE}

  # TODO: Configure this function
  UpdateCar:
    handler: src/lambda/http/updateCar.handler
    events:
      - http:
          method: patch
          path: cars/{carId}
          cors: true
          authorizer:
            name: Auth
            localAuthorizer:
              name: "mylocalAuthProxyFn"
              type: "request"
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update a car
            description: Update a car
            requestModels:
              "application/json": CarUpdateRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CAR_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CAR_TABLE}/index/${self:provider.environment.CAR_USER_ID}

  # TODO: Configure this function
  DeleteCar:
    handler: src/lambda/http/deleteCar.handler
    events:
      - http:
          method: delete
          path: cars/{carId}
          cors: true
          authorizer:
            name: Auth
            localAuthorizer:
              name: "mylocalAuthProxyFn"
              type: "request"
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CAR_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CAR_TABLE}/index/${self:provider.environment.CAR_USER_ID}

  # TODO: Configure this function
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: cars/{carId}/attachment
          cors: true
          authorizer:
            name: Auth
            localAuthorizer:
              name: "mylocalAuthProxyFn"
              type: "request"
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: arn:aws:s3:::${self:provider.environment.CARS_S3_BUCKET}/*
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CAR_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CAR_TABLE}/index/${self:provider.environment.CAR_USER_ID}

resources:
  Resources:
    # TODO: Add any necessary AWS resources
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,Origin'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,DELETE,PATCH'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: "request-body-validator"
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    CarsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: carId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: carId
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.CAR_TABLE}
        GlobalSecondaryIndexes: # Allow to filter using userId
          - IndexName: ${self:provider.environment.CAR_USER_ID}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: carId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.CARS_S3_BUCKET}
        Tags:
          - Key: "Allowed_Public_Access"
            Value: "True"
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - "*"
              AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: Car-Bucket-Role
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: "*"
              Action: "s3:GetObject"
              Resource: "arn:aws:s3:::${self:provider.environment.CARS_S3_BUCKET}/*"
        Bucket: !Ref AttachmentsBucket
